// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios16.0-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name PrivySDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AuthenticationServices
import Combine
import CryptoKit
import Factory
import Foundation
@_exported import PrivySDK
import Swift
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum OAuthProvider {
  case google
  case apple
  case twitter
  public static func == (a: PrivySDK.OAuthProvider, b: PrivySDK.OAuthProvider) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SiweMessageParams {
  public init(appDomain: Swift.String, appUri: Swift.String, chainId: Swift.String, walletAddress: Swift.String)
}
public struct EmailAccount {
  public let email: Swift.String
  public let firstVerifiedAt: Foundation.Date
  public let latestVerifiedAt: Foundation.Date
}
public enum AuthState {
  case notReady
  case unauthenticated
  case authenticated(any PrivySDK.PrivyUser)
}
public protocol EmbeddedSolanaWalletProvider {
  func signMessage(message: Swift.String) async throws -> Swift.String
}
public struct WalletLoginMetadata {
  public init(walletClientType: PrivySDK.WalletClientType?, connectorType: Swift.String?)
}
@_hasMissingDesignatedInitializers public class PrivySdk {
  public static func initialize(config: PrivySDK.PrivyConfig) -> any PrivySDK.Privy
  @objc deinit
}
public struct CustomAuth {
  public let userId: Swift.String
  public let firstVerifiedAt: Foundation.Date
  public let latestVerifiedAt: Foundation.Date
}
public protocol PrivyUser {
  var id: Swift.String { get }
  var identityToken: Swift.String? { get }
  var createdAt: Foundation.Date? { get }
  var linkedAccounts: [PrivySDK.LinkedAccount] { get }
  var embeddedEthereumWallets: [any PrivySDK.EmbeddedEthereumWallet] { get }
  var embeddedSolanaWallets: [any PrivySDK.EmbeddedSolanaWallet] { get }
  func getAccessToken() async throws -> Swift.String
  func createEthereumWallet(allowAdditional: Swift.Bool) async throws -> any PrivySDK.EmbeddedEthereumWallet
  func createSolanaWallet() async throws -> any PrivySDK.EmbeddedSolanaWallet
  func refresh() async throws
  func logout()
}
public protocol EmbeddedSolanaWallet : PrivySDK.EmbeddedWallet {
  var provider: any PrivySDK.EmbeddedSolanaWalletProvider { get }
}
extension PrivySDK.EmbeddedSolanaWallet {
  public var chainType: PrivySDK.ChainType {
    get
  }
}
public enum WalletClientType : Swift.String {
  case other
  case privy
  case coinbase_wallet
  case metamask
  case trust
  case safe
  case rainbow
  case uniswap
  case zerion
  case argent
  case spot
  case omni
  case cryptocom
  case blockchain
  case safepal
  case bitkeep
  case zengo
  case oneInch
  case binance
  case exodus
  case mew_wallet
  case alphawallet
  case keyring_pro
  case mathwallet
  case unstoppable
  case obvious
  case ambire
  case internet_money_wallet
  case coin98
  case abc_wallet
  case arculus_wallet
  case haha
  case cling_wallet
  case broearn
  case copiosa
  case burrito_wallet
  case enjin_wallet
  case plasma_wallet
  case avacus
  case bee
  case pitaka
  case pltwallet
  case minerva
  case kryptogo
  case prema
  case slingshot
  case kriptonio
  case timeless
  case secux
  case bitizen
  case blocto
  case safemoon
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol EmbeddedWallet {
  var address: Swift.String { get }
  var recoveryMethod: Swift.String? { get }
  var hdWalletIndex: Swift.Int { get }
  var chainType: PrivySDK.ChainType { get }
}
public struct GoogleAccount {
  public let subject: Swift.String
  public let email: Swift.String
  public let name: Swift.String?
  public let firstVerifiedAt: Foundation.Date
  public let latestVerifiedAt: Foundation.Date
}
public struct EmbeddedEthereumWalletAccount {
  public let address: Swift.String
  public let chainType: PrivySDK.ChainType
  public let recoveryMethod: Swift.String?
  public let firstVerifiedAt: Foundation.Date
  public let latestVerifiedAt: Foundation.Date
  public let hdWalletIndex: Swift.Int
}
public struct Utils {
  public static func toHexString(_ value: Any) -> Swift.String?
}
public protocol EmbeddedEthereumWallet : PrivySDK.EmbeddedWallet {
  var provider: any PrivySDK.EmbeddedEthereumWalletProvider { get }
}
extension PrivySDK.EmbeddedEthereumWallet {
  public var chainType: PrivySDK.ChainType {
    get
  }
}
public protocol EmbeddedEthereumWalletProvider {
  var chainId: Swift.Int { get }
  func request(_ request: PrivySDK.EthereumRpcRequest) async throws -> Swift.String
  func switchChain(chainId: Swift.Int, rpcUrl: Swift.String?)
}
public struct ExternalWallet {
  public let address: Swift.String
  public let chainType: PrivySDK.ChainType
  public let chainId: Swift.String?
  public let walletClientType: Swift.String?
  public let connectorType: Swift.String?
  public let firstVerifiedAt: Foundation.Date
  public let latestVerifiedAt: Foundation.Date
}
public protocol Privy {
  func awaitReady() async
  var user: (any PrivySDK.PrivyUser)? { get }
  var authState: PrivySDK.AuthState { get }
  var authStatePublisher: Combine.AnyPublisher<PrivySDK.AuthState, Swift.Never> { get }
  var email: any PrivySDK.LoginWithEmail { get }
  var sms: any PrivySDK.LoginWithSms { get }
  var siwe: any PrivySDK.LoginWithSiwe { get }
  var customJwt: any PrivySDK.LoginWithCustomAccessToken { get }
  var oAuth: any PrivySDK.LoginWithOAuth { get }
}
public struct PrivyConfig {
  public let appId: Swift.String
  public let appClientId: Swift.String?
  public let loggingConfig: PrivySDK.PrivyLoggingConfig?
  public let customAuthConfig: PrivySDK.PrivyLoginWithCustomAuthConfig?
  public init(appId: Swift.String, appClientId: Swift.String, loggingConfig: PrivySDK.PrivyLoggingConfig? = nil, customAuthConfig: PrivySDK.PrivyLoginWithCustomAuthConfig? = nil)
}
public struct PrivyLoggingConfig {
  public let logLevel: PrivySDK.PrivyLogLevel
  public let logMessage: ((PrivySDK.PrivyLogLevel, Swift.String) -> Swift.Void)?
  public init(logLevel: PrivySDK.PrivyLogLevel, logMessage: ((PrivySDK.PrivyLogLevel, Swift.String) -> Swift.Void)? = nil)
}
public struct PrivyLoginWithCustomAuthConfig {
  public let tokenProvider: PrivySDK.TokenProvider
  public init(tokenProvider: @escaping PrivySDK.TokenProvider)
}
public enum SupportedChain : Swift.CaseIterable {
  case mainnet
  case sepolia
  case goerli
  case base
  case baseGoerli
  case baseSepolia
  case optimism
  case matic
  case filecoinMainnet
  case optimismGoerli
  case arbitrum
  case celo
  case celoAlfajores
  case avalancheFuji
  case avalanche
  case lineaTestnet
  case lineaMainnet
  case polygonMumbai
  case filecoinCalibration
  case arbitrumGoerli
  public static func == (a: PrivySDK.SupportedChain, b: PrivySDK.SupportedChain) -> Swift.Bool
  public typealias AllCases = [PrivySDK.SupportedChain]
  nonisolated public static var allCases: [PrivySDK.SupportedChain] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PrivySDK.SupportedChain {
  public var chainInfo: PrivySDK.ChainInfo {
    get
  }
}
public struct TwitterAccount {
  public let subject: Swift.String
  public let username: Swift.String?
  public let name: Swift.String?
  public let profilePictureUrl: Swift.String?
  public let firstVerifiedAt: Foundation.Date
  public let latestVerifiedAt: Foundation.Date
}
public enum SessionUpdateAction : Swift.String, Swift.Decodable {
  case set
  case clear
  case ignore
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ChainInfo {
  public let id: Swift.Int
  public let name: Swift.String
  public let network: Swift.String
  public let nativeCurrency: PrivySDK.NativeCurrency
  public let rpcUrls: PrivySDK.RpcUrls
  public let blockExplorers: PrivySDK.BlockExplorers
  public let contracts: PrivySDK.Contracts?
  public let testnet: Swift.Bool
  public init(id: Swift.Int, name: Swift.String, network: Swift.String, nativeCurrency: PrivySDK.NativeCurrency, rpcUrls: PrivySDK.RpcUrls, blockExplorers: PrivySDK.BlockExplorers, contracts: PrivySDK.Contracts? = nil, testnet: Swift.Bool = false)
}
public struct NativeCurrency {
  public let name: Swift.String
  public let symbol: Swift.String
  public let decimals: Swift.Int
}
public struct RpcUrl {
  public let http: [Swift.String]
  public let webSocket: [Swift.String]?
}
public struct RpcUrls {
  public let `default`: PrivySDK.RpcUrl
  public let `public`: PrivySDK.RpcUrl
  public let blast: PrivySDK.RpcUrl?
  public let alchemy: PrivySDK.RpcUrl?
  public let infura: PrivySDK.RpcUrl?
  public let privy: PrivySDK.RpcUrl?
  public init(default: PrivySDK.RpcUrl, public: PrivySDK.RpcUrl, alchemy: PrivySDK.RpcUrl? = nil, infura: PrivySDK.RpcUrl? = nil, blast: PrivySDK.RpcUrl? = nil, privy: PrivySDK.RpcUrl? = nil)
}
public struct BlockExplorer {
  public let name: Swift.String
  public let url: Swift.String
}
public struct BlockExplorers {
  public let etherscan: PrivySDK.BlockExplorer
  public let `default`: PrivySDK.BlockExplorer?
  public let filscan: PrivySDK.BlockExplorer?
  public init(etherscan: PrivySDK.BlockExplorer, default: PrivySDK.BlockExplorer? = nil, filscan: PrivySDK.BlockExplorer? = nil)
}
public struct Contracts {
  public let multicall3: PrivySDK.Multicall3
}
public struct Multicall3 {
  public let address: Swift.String
  public let blockCreated: Swift.Int
}
public struct PhoneNumberAccount {
  public let phoneNumber: Swift.String
  public let firstVerifiedAt: Foundation.Date
  public let latestVerifiedAt: Foundation.Date
}
public enum ChainType {
  case ethereum
  case solana
  public static func == (a: PrivySDK.ChainType, b: PrivySDK.ChainType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LoginWithSms {
  func sendCode(to phoneNumber: Swift.String) async throws
  func loginWithCode(_ code: Swift.String, sentTo phoneNumber: Swift.String) async throws -> any PrivySDK.PrivyUser
}
public struct AppleAccount {
  public let subject: Swift.String
  public let email: Swift.String
  public let firstVerifiedAt: Foundation.Date
  public let latestVerifiedAt: Foundation.Date
}
public enum PrivyLogLevel : Swift.Comparable {
  case none
  case error
  case warning
  case info
  case debug
  case verbose
  public static func < (a: PrivySDK.PrivyLogLevel, b: PrivySDK.PrivyLogLevel) -> Swift.Bool
  public static func == (a: PrivySDK.PrivyLogLevel, b: PrivySDK.PrivyLogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrivyError : Foundation.LocalizedError {
  public let errorCode: PrivySDK.PrivyErrorCode
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PrivyErrorCode {
  case authenticationFailure(reason: PrivySDK.PrivyErrorCode.AuthenticationFailureReason)
  case embeddedWalletFailure(reason: PrivySDK.PrivyErrorCode.EmbeddedWalletFailureReason)
  case initializationFailed
  public enum AuthenticationFailureReason : Swift.Sendable {
    case noCustomAuthProviderConfigured
    case customAuthProviderReturnedNoToken
    case notLoggedIn
    case invalidJwt
    case incorrectCredentials(loginMethod: PrivySDK.LoginMethod)
    case failureDuringAuthentication(error: any Swift.Error)
  }
  public enum EmbeddedWalletFailureReason : Swift.Sendable {
    case timeout
    case failedToDecodeWalletResponse
    case creationFailed
    case additionalWalletsBlocked
    case noWalletAvailable
    case maxNumberOfAdditionalWallet(count: Swift.Int)
    case unsupportedChain
    case rpcUrlNotFound
    case secureContextFailed
    case rpcError
  }
}
public struct EmbeddedSolanaWalletAccount {
  public let address: Swift.String
  public let chainType: PrivySDK.ChainType
  public let recoveryMethod: Swift.String?
  public let firstVerifiedAt: Foundation.Date
  public let latestVerifiedAt: Foundation.Date
  public let hdWalletIndex: Swift.Int
}
public enum LoginMethod : Swift.Codable, Swift.Sendable {
  case customAccessToken
  case email
  case phone
  case siwe
  case oauth
  public static func == (a: PrivySDK.LoginMethod, b: PrivySDK.LoginMethod) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public typealias TokenProvider = () async throws -> Swift.String?
public protocol LoginWithCustomAccessToken {
  func loginWithCustomAccessToken() async throws -> any PrivySDK.PrivyUser
}
public struct EthereumRpcRequest {
  public let method: Swift.String
  public let params: [Swift.String]
  public init(method: Swift.String, params: [Swift.String])
}
public enum LinkedAccount {
  case customAuth(PrivySDK.CustomAuth)
  case embeddedEthereumWallet(PrivySDK.EmbeddedEthereumWalletAccount)
  case embeddedSolanaWallet(PrivySDK.EmbeddedSolanaWalletAccount)
  case externalWallet(PrivySDK.ExternalWallet)
  case email(PrivySDK.EmailAccount)
  case phone(PrivySDK.PhoneNumberAccount)
  case google(PrivySDK.GoogleAccount)
  case twitter(PrivySDK.TwitterAccount)
  case apple(PrivySDK.AppleAccount)
}
public protocol LoginWithEmail {
  func sendCode(to email: Swift.String) async throws
  func loginWithCode(_ code: Swift.String, sentTo email: Swift.String) async throws -> any PrivySDK.PrivyUser
  func linkWithCode(_ code: Swift.String, sentTo email: Swift.String) async throws
}
public protocol LoginWithOAuth {
  func login(with provider: PrivySDK.OAuthProvider, appUrlScheme: Swift.String?) async throws -> any PrivySDK.PrivyUser
}
extension PrivySDK.LoginWithOAuth {
  public func login(with provider: PrivySDK.OAuthProvider) async throws -> any PrivySDK.PrivyUser
}
public protocol LoginWithSiwe {
  func generateSiweMessage(params: PrivySDK.SiweMessageParams) async throws -> Swift.String
  func loginWithSiwe(message: Swift.String, signature: Swift.String, params: PrivySDK.SiweMessageParams, metadata: PrivySDK.WalletLoginMetadata?) async throws -> any PrivySDK.PrivyUser
  func linkWithSiwe(message: Swift.String, signature: Swift.String, params: PrivySDK.SiweMessageParams, metadata: PrivySDK.WalletLoginMetadata?) async throws
}
extension PrivySDK.LoginWithSiwe {
  public func loginWithSiwe(message: Swift.String, signature: Swift.String, params: PrivySDK.SiweMessageParams) async throws -> any PrivySDK.PrivyUser
  public func linkWithSiwe(message: Swift.String, signature: Swift.String, params: PrivySDK.SiweMessageParams) async throws
}
@_hasMissingDesignatedInitializers public class PrivyInternal {
  public static func setConfig(config: [Swift.String : Swift.String])
  @objc deinit
}
extension PrivySDK.OAuthProvider : Swift.Equatable {}
extension PrivySDK.OAuthProvider : Swift.Hashable {}
extension PrivySDK.WalletClientType : Swift.Equatable {}
extension PrivySDK.WalletClientType : Swift.Hashable {}
extension PrivySDK.WalletClientType : Swift.RawRepresentable {}
extension PrivySDK.SupportedChain : Swift.Equatable {}
extension PrivySDK.SupportedChain : Swift.Hashable {}
extension PrivySDK.SessionUpdateAction : Swift.Equatable {}
extension PrivySDK.SessionUpdateAction : Swift.Hashable {}
extension PrivySDK.SessionUpdateAction : Swift.RawRepresentable {}
extension PrivySDK.ChainType : Swift.Equatable {}
extension PrivySDK.ChainType : Swift.Hashable {}
extension PrivySDK.PrivyLogLevel : Swift.Hashable {}
extension PrivySDK.LoginMethod : Swift.Equatable {}
extension PrivySDK.LoginMethod : Swift.Hashable {}
